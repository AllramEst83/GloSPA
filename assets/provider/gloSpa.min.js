const GloSPA=(()=>{class EventBus{constructor(){this.target=document.createElement("span");this.wildcardListeners=[]}on(event,cb){this.target.addEventListener(event,cb)}off(event,cb){this.target.removeEventListener(event,cb)}once(event,cb){const wrapper=(e)=>{cb(e);this.off(event,wrapper)};this.on(event,wrapper)}emit(event,detail=null){const evt=new CustomEvent(event,{detail});this.target.dispatchEvent(evt);this.wildcardListeners.forEach((cb)=>cb(event,detail))}onAny(cb){this.wildcardListeners.push(cb)}offAny(cb){this.wildcardListeners=this.wildcardListeners.filter(fn=>fn!==cb)}}function createReactive(state){const bindings=new Map();function getNestedValue(obj,path){return path.split('.').reduce((current,key)=>current?.[key],obj)}function setNestedValue(obj,path,value){const keys=path.split('.');const lastKey=keys.pop();const target=keys.reduce((current,key)=>{if(!(key in current))current[key]={};return current[key]},obj);target[lastKey]=value}function bindTemplates(root=document){const walker=document.createTreeWalker(root,NodeFilter.SHOW_TEXT,null);while(walker.nextNode()){const node=walker.currentNode;const original=node.textContent;const matches=original.match(/{{\s*([\w.]+)\s*}}/g);if(matches){matches.forEach((raw)=>{const key=raw.replace(/[{}]/g,"").trim();if(!bindings.has(key))bindings.set(key,[]);bindings.get(key).push({node,original});const value=getNestedValue(state,key);node.textContent=original.replace(raw,value??"");})}}}function createNestedProxy(obj,path=''){return new Proxy(obj,{set(target,key,value){const fullPath=path?`${path}.${key}`:key;target[key]=value;if(bindings.has(fullPath)){bindings.get(fullPath).forEach(({node,original})=>{node.textContent=original.replace(/{{\s*([\w.]+)\s*}}/g,(_,k)=>{return getNestedValue(state,k)??""})})}bindings.forEach((nodeList,bindingKey)=>{if(bindingKey.startsWith(fullPath)||fullPath.startsWith(bindingKey.split('.')[0])){nodeList.forEach(({node,original})=>{node.textContent=original.replace(/{{\s*([\w.]+)\s*}}/g,(_,k)=>{return getNestedValue(state,k)??""})})}});return true},get(target,key){const value=target[key];if(value&&typeof value==='object'&&!Array.isArray(value)){const fullPath=path?`${path}.${key}`:key;return createNestedProxy(value,fullPath)}return value}})}function makeReactive(obj,path=''){for(const[key,value]of Object.entries(obj)){if(value&&typeof value==='object'&&!Array.isArray(value)){const fullPath=path?`${path}.${key}`:key;obj[key]=createNestedProxy(value,fullPath);makeReactive(value,fullPath)}}}makeReactive(state);const proxy=createNestedProxy(state);proxy.__bindTemplates=bindTemplates;proxy.__set=(path,value)=>{setNestedValue(state,path,value);const keys=path.split('.');let current=proxy;for(let i=0;i<keys.length-1;i++){current=current[keys[i]]}current[keys[keys.length-1]]=value};return proxy}const components={};function registerComponent(name,compFn){components[name]=compFn}function renderComponents(root,store,bus){root.querySelectorAll("[data-component]").forEach((el)=>{const name=el.getAttribute("data-component");const comp=components[name]?.();if(!comp)return;el.innerHTML=comp.template;store.__bindTemplates(el);if(comp.init)comp.init(store,bus,el)})}async function initRouter(routes,store,options={}){const{authGuard=()=>true,roleGuard=()=>[],routeRoles={},loginRoute="login",unauthorizedRoute="unauthorized",publicRoutes=["login","home","unauthorized"]}=options;function requiresAuth(routeName){return!publicRoutes.includes(routeName)}function hasRequiredRoles(routeName,userRoles){const requiredRoles=routeRoles[routeName];if(!requiredRoles||requiredRoles.length===0){return true}return requiredRoles.some(role=>userRoles.includes(role))}async function checkRouteGuard(requestedRoute){if(!requiresAuth(requestedRoute)){return requestedRoute}const isAuthenticated=await authGuard(store,GloSPA.bus);if(!isAuthenticated){store.__intendedRoute=requestedRoute;GloSPA.bus.emit('login-required',{intendedRoute:requestedRoute});return loginRoute}const userRoles=await roleGuard(store,GloSPA.bus);if(!hasRequiredRoles(requestedRoute,userRoles)){GloSPA.bus.emit('access-denied',{route:requestedRoute,userRoles,requiredRoles:routeRoles[requestedRoute]});return unauthorizedRoute}return requestedRoute}async function loadRoute(){const requestedPath=location.hash.slice(1)||"home";const path=await checkRouteGuard(requestedPath);if(path!==requestedPath){history.replaceState(null,null,`#${path}`)}let comp=routes[path];if(!comp){document.getElementById("app").innerHTML="<h1>404 - Page Not Found</h1>";return}document.getElementById("app").innerHTML="<p>Loading...</p>";if(typeof comp==="function"){const mod=await comp();comp=mod.default}document.getElementById("app").innerHTML=comp.template;store.__bindTemplates(document.getElementById("app"));renderComponents(document.getElementById("app"),store,GloSPA.bus);if(comp.init){await comp.init(store,GloSPA.bus)}GloSPA.bus.emit('route-loaded',{route:path,wasRedirected:path!==requestedPath})}function navigateTo(route){location.hash=route}function navigateToIntended(){const intended=store.__intendedRoute;if(intended){delete store.__intendedRoute;navigateTo(intended)}}window.addEventListener("hashchange",loadRoute);GloSPA.bus.on('login-success',navigateToIntended);GloSPA.navigateTo=navigateTo;GloSPA.navigateToIntended=navigateToIntended;GloSPA.rbac={hasRole:async(role)=>{const userRoles=await roleGuard(store,GloSPA.bus);return userRoles.includes(role)},hasAnyRole:async(roles)=>{const userRoles=await roleGuard(store,GloSPA.bus);return roles.some(role=>userRoles.includes(role))},hasAllRoles:async(roles)=>{const userRoles=await roleGuard(store,GloSPA.bus);return roles.every(role=>userRoles.includes(role))},canAccess:async(routeName)=>{if(!requiresAuth(routeName))return true;const isAuthenticated=await authGuard(store,GloSPA.bus);if(!isAuthenticated)return false;const userRoles=await roleGuard(store,GloSPA.bus);return hasRequiredRoles(routeName,userRoles)},getUserRoles:async()=>{return await roleGuard(store,GloSPA.bus)}};loadRoute()}return{bus:new EventBus(),createReactive,initRouter,registerComponent,hasComponent:(name)=>!!components[name],rbac:{hasRole:null,hasAnyRole:null,hasAllRoles:null,canAccess:null}}})();if(typeof module!=='undefined'&&module.exports){module.exports=GloSPA}else if(typeof define==='function'&&define.amd){define([],function(){return GloSPA})}else{window.GloSPA=GloSPA}export default GloSPA;